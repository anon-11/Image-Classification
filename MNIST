import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

import numpy as np
from matplotlib import pyplot as plt

(x_train, y_train), (x_test,y_test)=mnist.load_data()

print(x_test.shape)
plt.imshow(x_train[0], cmap='binary')
#print(y_train[0])

y_train_encoded=to_categorical(y_train)
y_test_encoded=to_categorical(y_test)

x_train_reshape=np.reshape(x_train,(60000,784))
x_test_reshape=np.reshape(x_test,(10000,784))


#print(y_test_encoded[0])

#print(set(x_train_reshape[0]))

#normalization:

x_mean=np.mean(x_train_reshape)
x_std=np.std(x_train_reshape)

epsilon=1e-10

x_train_norm=(x_train_reshape-x_mean)/(x_std+epsilon)
x_test_norm=(x_test_reshape-x_mean)/(x_std+epsilon)

#print(set(x_train_norm[0]))
model= Sequential([Dense(128, activation='relu', input_shape=[784,]), Dense(128, activation='relu'), Dense(10, activation='softmax')])

#compiling model
model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])


#training the model
model.fit(x_train_norm, y_train_encoded, epochs=3, batch_size=32, validation_data=(x_test_norm, y_test_encoded))

#evaluating model:

loss, accuracy=model.evaluate(x_test_norm, y_test_encoded)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)


#predictions
predictions=model.predict(x_test_norm)
#print(predictions.shape)

plt.figure(figsize=(12,12))
start_index=0

for i in range(25):
  plt.subplot(5,5,i+1)
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  pred=np.argmax(predictions[start_index+i])
  groundtruth=y_test[start_index+i]

  col='g'
  if pred!=groundtruth:
    col='r'
  plt.xlabel('i={} | pred={} | gt={}'.format(start_index+i, pred, groundtruth))
  plt.imshow(x_test[start_index+i], cmap='binary')
plt.show()

plt.plot(predictions[8])
plt.show()
