import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import numpy as np
from matplotlib import pyplot as plt
import pandas as pd


(x_train, y_train), (x_test, y_test) = mnist.load_data()


plt.imshow(x_train[0], cmap='binary')


x_train_reshape = x_train.reshape((60000, 28, 28, 1))
x_test_reshape = x_test.reshape((10000, 28, 28, 1))


x_train_norm = x_train_reshape / 255.0
x_test_norm = x_test_reshape / 255.0


y_train_encoded = to_categorical(y_train)
y_test_encoded = to_categorical(y_test)


model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


train_acc = []
val_acc = []
epochs = 10  

for epoch in range(epochs):
    history = model.fit(x_train_norm, y_train_encoded, 
                        epochs=1, 
                        batch_size=32, 
                        validation_data=(x_test_norm, y_test_encoded), 
                        verbose=0)
    
    train_acc.append(history.history['accuracy'][0])
    val_acc.append(history.history['val_accuracy'][0])
    print(f"Epoch {epoch + 1}/{epochs} - Training Accuracy: {train_acc[-1]:.4f}, Validation Accuracy: {val_acc[-1]:.4f}")

# Saving to excel file
data = {
    "Epoch": list(range(1, epochs + 1)),
    "Training Accuracy": train_acc,
    "Validation Accuracy": val_acc
}
df = pd.DataFrame(data)
df.to_excel("cnn_accuracy_data.xlsx", index=False)

print("Accuracy data saved to 'cnn_accuracy_data.xlsx'")


plt.figure(figsize=(10, 6))
plt.plot(range(1, epochs + 1), train_acc, label='Training Accuracy', marker='o')
plt.plot(range(1, epochs + 1), val_acc, label='Validation Accuracy', marker='o')
plt.title('Accuracy vs Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Evaluate the model
loss, accuracy = model.evaluate(x_test_norm, y_test_encoded)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)

# Predictions
predictions = model.predict(x_test_norm)


plt.figure(figsize=(12, 12))
start_index = 0

for i in range(25):
    plt.subplot(5, 5, i + 1)
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    pred = np.argmax(predictions[start_index + i])
    groundtruth = y_test[start_index + i]

    col = 'g' if pred == groundtruth else 'r'
    plt.xlabel(f'i={start_index + i} | pred={pred} | gt={groundtruth}', color=col)
    plt.imshow(x_test[start_index + i], cmap='binary')

plt.show()
